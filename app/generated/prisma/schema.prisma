// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  writeBarrelFiles                 = false
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  createPartialTypes               = true
}

model User {
  id        Int       @id @default(autoincrement())
  /// @zod.string.min(1)  
  username  String    @unique @db.VarChar(30)
  /// @zod.string.email().min(1)
  email     String    @unique @db.VarChar(255)
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  articles  Article[]

  @@index([email])
  @@index([username])
  @@map("users")
}

model Article {
  id         Int          @id @default(autoincrement())
  /// @zod.string.min(1).max(100)  
  title      String       @db.VarChar(100)
  /// @zod.string.min(1)
  content    String
  userId     Int          @map("user_id")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ArticleTag ArticleTag[]

  @@index([userId])
  @@map("articles")
}

model Tag {
  id         Int          @id @default(autoincrement())
  /// @zod.string.min(1).max(30)
  name       String       @db.VarChar(30)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  ArticleTag ArticleTag[]

  @@index([name])
  @@map("tags")
}

model ArticleTag {
  id        Int      @id @default(autoincrement())
  articleId Int      @map("article_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}
